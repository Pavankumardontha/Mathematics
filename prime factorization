#include<bits/stdc++.h>
#include<iostream>
using namespace std;


/* we will do prime factorising by 2 methods. one is by brute force and the other is by slight modification
of the brute force using some claim. 

claim: if N is a composite number,then there exists atleast one prime divisor of n below sqrt(n).

brute force method : O(n)
modified method : O(sqrt(n))

In the modified method we just run the loop untill sqrt(n).This is the only modification from the brute force
method.
*/

void  brute_prime_factorize(int n)
{
    int cnt;
    for(int i=2;i<=n;i++)
    {
        if(n%i==0)
        {
              cnt=0;
              while(n%i==0)
              {
                 cnt++;
                 n=n/i;
              }
              cout<<i<<"^"<<cnt<<" ";
        }
    }
    if(n>1)
    cout<<n<<"^"<<1<<endl;
    else
    cout<<endl;
}

void prime_factorize(int n)
{
    int cnt;
    /* using the claim mentioned above.*/
    for(int i=2;i*i<=n;i++)//only this loop condition is changed,rest all is same as brute force.
    {
        if(n%i==0)
        {
            while(n%i==0)
            {
                cnt++;
                n=n/i;
            }
            cout<<i<<"^"<<cnt<<" ";
        }
    }
    if(n>1)
    cout<<n<<"^"<<1<<endl;
    else
    cout<<endl;
}


int main()
{
    int n;
    cin>>n;
    prime_factorize(n);
    brute_prime_factorize(n);
}
